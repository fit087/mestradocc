/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JFrameGraphicTest.java
 *
 * Created on 25/07/2010, 08:23:58
 */
package gui;

import com.sun.codemodel.internal.JOp;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import main.entities.AirlineNetwork;
import main.entities.Flight;
import main.entities.Track;
import main.heuristic.ARPParameters;
import main.heuristic.GRASPConstruct;
import main.heuristic.GRASPParameters;
import main.heuristic.SolverConstruct;
import main.reader.ARPFileReader;
import misc.InstancesFormatter;
import util.InstanceUtil;
import util.SolutionUtil;

/**
 *
 * @author alexanderdealmeidapinto
 */
public class JFrameGraphicTest extends javax.swing.JFrame {

    public static JFrameGraphicTest instance;
    JFileChooser fileChooserFormattedInstance = new JFileChooser("/Users/alexanderdealmeidapinto/Documents/Mestrado/Projeto/svn/trunk/AIRotation");
    private JPanelARPControler jpac = new JPanelARPControler();

    /** Creates new form JFrameGraphicTest */
    public JFrameGraphicTest() {
        initComponents();
        jScrollPane1.getViewport().add(jpac);
        instance = this;

//        new Thread() {
//
//            @Override
//            public void run() {
//                initGraphics();
//
//            }
//        }.start();
    }

    public void initGraphics(boolean executeGrasp) {
        ArrayList<Integer> conts = new ArrayList<Integer>();
        int menorcusto = 9999999;

        jpac.setStop(false);
        for (int i = 0; i < 1; i++) {
            int cont = 0;

            cont++;

            AirlineNetwork airlineNetwork = new AirlineNetwork("instances/03");

            try {
                ARPFileReader.readDataFromFile(airlineNetwork.getPathInstance(), airlineNetwork);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(JFrameGraphicTest.class.getName()).log(Level.SEVERE, null, ex);
            }

            System.out.println("Instancia " + airlineNetwork.getPathInstance() + " Numero de voos " + airlineNetwork.getFlights().size());

            if (executeGrasp) {
                GRASPConstruct gRASPConstruct = new GRASPConstruct(airlineNetwork, GRASPParameters.defaultParameters, ARPParameters.defaultParameters);
                gRASPConstruct.GRASPResolve();
            } else {
                fileChooserFormattedInstance.showOpenDialog(jpac);

                if (fileChooserFormattedInstance.getSelectedFile() == null) {
                    return;
                }
                try {
                    SolverConstruct.constructFromFile(airlineNetwork, fileChooserFormattedInstance.getSelectedFile());
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(JFrameGraphicTest.class.getName()).log(Level.SEVERE, null, ex);
                }

            }


            jpac.initChart(airlineNetwork);

            jpac.initConfigures();

            if (menorcusto > airlineNetwork.getBestNetworkCost()) {
                menorcusto = airlineNetwork.getBestNetworkCost();
            }

            conts.add(cont);

            if (jpac.getStop()) {
                break;
            }

            if (airlineNetwork.getBestNetworkCost() < 19000) {
                break;
            }
            if (cont == 10) {
                break;
            }
        }

        System.out.print("Conts: ");
        int media = 0;
        for (Integer integer : conts) {
            System.out.print(integer + " ");
            media += integer;
        }
        System.out.println("");

        System.out.println("Media: " + ((float) media / (float) conts.size()));
        System.out.println("Menor Custo " + menorcusto);


    }

    public static void setPercentComplete(int value) {
        instance.getJPanelAircraftControler().setPercentComplete(value);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.META_MASK));
        jMenuItem1.setText("Executar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem6.setText("Executar do arquivo");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem8.setText("Executar com o SOLVER");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ferramentas");

        jMenuItem2.setText("Configurações");
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Formatar resultado");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Completar instância");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Gerar instancia para o solver");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem7.setText("Escrever arquivo de entrada");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1008, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:


        new Thread() {

            @Override
            public void run() {

                initGraphics(true);

                long init = System.currentTimeMillis();
                //InstanceUtil.generatePieces(jpac.getAirlineNetwork());
                long time = System.currentTimeMillis() - init;

                System.out.println("Tempo = " + time / 1000);
            }
        }.start();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        if (fileChooserFormattedInstance.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooserFormattedInstance.getSelectedFile();
            try {
                SolutionUtil.writeFormatedSolutionForInstance(jpac.getAirlineNetwork().getBestNetwork(), selectedFile);
                JOptionPane.showMessageDialog(null, "Solução gravada com sucesso no arquivo " + selectedFile.getAbsolutePath());
            } catch (IOException ex) {
                Logger.getLogger(JFrameGraphicTest.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        InstanceUtil.generatePieces(jpac.getAirlineNetwork());
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        if (fileChooserFormattedInstance.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooserFormattedInstance.getSelectedFile();
            try {
                SolutionUtil.writeFormatedAirlineNetworkForCplex(jpac.getAirlineNetwork(), selectedFile);
                JOptionPane.showMessageDialog(null, "Solução gravada com sucesso no arquivo " + selectedFile.getAbsolutePath());
            } catch (IOException ex) {
                Logger.getLogger(JFrameGraphicTest.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        new Thread() {

            @Override
            public void run() {

                initGraphics(false);

                long init = System.currentTimeMillis();
                //InstanceUtil.generatePieces(jpac.getAirlineNetwork());
                long time = System.currentTimeMillis() - init;

                System.out.println("Tempo = " + time / 1000);
            }
        }.start();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        if (fileChooserFormattedInstance.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooserFormattedInstance.getSelectedFile();
            try {
                SolutionUtil.writeFormatedInputAirlineNetwork(jpac.getAirlineNetwork(), selectedFile);
                JOptionPane.showMessageDialog(null, "Solução gravada com sucesso no arquivo " + selectedFile.getAbsolutePath());
            } catch (IOException ex) {
                Logger.getLogger(JFrameGraphicTest.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        try {
            File file = new File("./solver/entrada.txt");
            SolutionUtil.writeFormatedAirlineNetworkForCplex(jpac.getAirlineNetwork(), file);

           // Runtime.getRuntime().exec("./solver/arp")
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Não foi possível executar o SOLVER\n" + ex.getMessage());
            Logger.getLogger(JFrameGraphicTest.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new JFrameGraphicTest().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private JPanelARPControler getJPanelAircraftControler() {
        return this.jpac;
    }
}
